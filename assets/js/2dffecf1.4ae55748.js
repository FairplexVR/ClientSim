"use strict";(self.webpackChunkclient_sim=self.webpackChunkclient_sim||[]).push([[7256],{3905:(e,t,r)=>{r.d(t,{Zo:()=>g,kt:()=>p});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function h(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):h(h({},t),e)),r},g=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),c=s(r),d=i,p=c["".concat(l,".").concat(d)]||c[d]||u[d]||a;return r?n.createElement(p,h(h({ref:t},g),{},{components:r})):n.createElement(p,h({ref:t},g))}));function p(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,h=new Array(a);h[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:i,h[1]=o;for(var s=2;s<a;s++)h[s]=r[s];return n.createElement.apply(null,h)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},643:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>h,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var n=r(7462),i=(r(7294),r(3905));const a={id:"highlight-manager",title:"HighlightManager",hide_title:!0},h="HighlightManager",o={unversionedId:"systems/runtime/highlight-manager",id:"systems/runtime/highlight-manager",title:"HighlightManager",description:"The HighlightManager will take an object and display an outline highlight effect for that object. This system wraps VRChat\u2019s HighlightFX class. HighlightFX only takes a single renderer, whereas the HighlightManager takes a GameObject. Matching how VRChat handles highlighting objects, all renderers on the object and on its children are used for highlighting. Renderers that are disabled, have a null mesh, or are part of a static batch are ignored. If an object has no valid renderers, then a Highlight Proxy is used based on the first collider on the object. The Highlight Proxy will copy the transform values of the original mesh and also apply the collider size and scale to make it appear that the collider is being highlighted. The HighlightManager is used to visualize the results from the PlayerRaycaster system. There is no set limit to the number of objects that can be highlighted, but only 2 objects are expected to be highlighted at once through ClientSim, one object per player hand. The HighlightManager links to the VRCSDK API for InputManager.EnableObjectHighlight. This hook only takes in renderers though and does not go through the full steps of finding children objects and creating proxies.",source:"@site/docs/systems/runtime/highlight-manager.md",sourceDirName:"systems/runtime",slug:"/systems/runtime/highlight-manager",permalink:"/systems/runtime/highlight-manager",draft:!1,editUrl:"https://github.com/vrchat-community/ClientSim/edit/main/Docs/Source/systems/runtime/highlight-manager.md",tags:[],version:"current",frontMatter:{id:"highlight-manager",title:"HighlightManager",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"VRCSDK Helpers",permalink:"/systems/runtime/helpers"},next:{title:"Input",permalink:"/systems/runtime/input"}},l={},s=[],g={toc:s},c="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(c,(0,n.Z)({},g,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"highlightmanager"},"HighlightManager"),(0,i.kt)("p",null,"The HighlightManager will take an object and display an outline highlight effect for that object. This system wraps VRChat\u2019s HighlightFX class. HighlightFX only takes a single renderer, whereas the HighlightManager takes a GameObject. Matching how VRChat handles highlighting objects, all renderers on the object and on its children are used for highlighting. Renderers that are disabled, have a null mesh, or are part of a static batch are ignored. If an object has no valid renderers, then a Highlight Proxy is used based on the first collider on the object. The Highlight Proxy will copy the transform values of the original mesh and also apply the collider size and scale to make it appear that the collider is being highlighted. The HighlightManager is used to visualize the results from the ",(0,i.kt)("a",{parentName:"p",href:"/systems/runtime/player#playerraycaster"},"PlayerRaycaster")," system. There is no set limit to the number of objects that can be highlighted, but only 2 objects are expected to be highlighted at once through ClientSim, one object per player hand. The HighlightManager links to the VRCSDK API for InputManager.EnableObjectHighlight. This hook only takes in renderers though and does not go through the full steps of finding children objects and creating proxies. "),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"[!NOTE]","\nThe HighlightManager currently shows only a preview for how the object will look on Quest. A style matching Windows systems is forthcoming.")))}u.isMDXComponent=!0}}]);