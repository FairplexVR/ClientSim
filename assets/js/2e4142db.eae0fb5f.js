"use strict";(self.webpackChunkclient_sim=self.webpackChunkclient_sim||[]).push([[8376],{3905:(t,e,r)=>{r.d(e,{Zo:()=>d,kt:()=>y});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var p=n.createContext({}),s=function(t){var e=n.useContext(p),r=e;return t&&(r="function"==typeof t?t(e):l(l({},e),t)),r},d=function(t){var e=s(t.components);return n.createElement(p.Provider,{value:e},t.children)},u="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,i=t.originalType,p=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),u=s(r),m=a,y=u["".concat(p,".").concat(m)]||u[m]||c[m]||i;return r?n.createElement(y,l(l({ref:e},d),{},{components:r})):n.createElement(y,l({ref:e},d))}));function y(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[u]="string"==typeof t?t:a,l[1]=o;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9399:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const i={id:"script-execution-order",title:"Script Execution Order",hide_title:!0},l="Script Execution Order",o={unversionedId:"systems/script-execution-order",id:"systems/script-execution-order",title:"Script Execution Order",description:"| Execution Order | System Name          | Description                                                                                                                                                    |",source:"@site/docs/systems/script-execution-order.md",sourceDirName:"systems",slug:"/systems/script-execution-order",permalink:"/systems/script-execution-order",draft:!1,editUrl:"https://github.com/vrchat-community/ClientSim/edit/main/Docs/Source/systems/script-execution-order.md",tags:[],version:"current",frontMatter:{id:"script-execution-order",title:"Script Execution Order",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Unity Event System",permalink:"/systems/runtime/unity-event-system"}},p={},s=[],d={toc:s},u="wrapper";function c(t){let{components:e,...r}=t;return(0,a.kt)(u,(0,n.Z)({},d,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"script-execution-order"},"Script Execution Order"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Execution Order"),(0,a.kt)("th",{parentName:"tr",align:null},"System Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"-Infinity"),(0,a.kt)("td",{parentName:"tr",align:null},"UnityInputSystem"),(0,a.kt)("td",{parentName:"tr",align:null},"Unity InputSystem updates before all MonoBehaviours. Input from user buttons are sent to ClientSimInput and events are dispatched.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"-3000"),(0,a.kt)("td",{parentName:"tr",align:null},"TrackingProvider"),(0,a.kt)("td",{parentName:"tr",align:null},"Input is checked to update the TrackignProvider. For example: Desktop head X rotation.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"-3000"),(0,a.kt)("td",{parentName:"tr",align:null},"PlayerController"),(0,a.kt)("td",{parentName:"tr",align:null},"Update Player position before raycasting.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"-2000"),(0,a.kt)("td",{parentName:"tr",align:null},"PlayerRaycaster"),(0,a.kt)("td",{parentName:"tr",align:null},"Update the position of the PlayerHands to TrackingProvider hand data. Raycast to find interactables in the world. This must happen before EventSystems update.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"-1000"),(0,a.kt)("td",{parentName:"tr",align:null},"Unity Event System"),(0,a.kt)("td",{parentName:"tr",align:null},"Send mouse events to interact with UI. Order cannot be changed.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0"),(0,a.kt)("td",{parentName:"tr",align:null},"ClientSimBehaviours"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0"),(0,a.kt)("td",{parentName:"tr",align:null},"UdonBehaviour"),(0,a.kt)("td",{parentName:"tr",align:null},"Send Update Events to Udon Programs.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"1"),(0,a.kt)("td",{parentName:"tr",align:null},"UdonInput"),(0,a.kt)("td",{parentName:"tr",align:null},"This must happen after UdonBehaviour.Update to ensure proper event order.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"10000"),(0,a.kt)("td",{parentName:"tr",align:null},"ClientSimBaseInput"),(0,a.kt)("td",{parentName:"tr",align:null},"Update current frame tick for Input Events. Only needed to ensure tests and playmode act the same relating to when Input is processed.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"30000"),(0,a.kt)("td",{parentName:"tr",align:null},"PlayerStationManager"),(0,a.kt)("td",{parentName:"tr",align:null},"Update the position of players on a station as late as possible so all other scripts have had time to evaluate first.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"30001"),(0,a.kt)("td",{parentName:"tr",align:null},"TooltipManager"),(0,a.kt)("td",{parentName:"tr",align:null},"Update the position of Tooltip visuals after finalizing the player's position.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"31000"),(0,a.kt)("td",{parentName:"tr",align:null},"PostLateUpdater"),(0,a.kt)("td",{parentName:"tr",align:null},"VRChat's PostLateUpdate event sent to UdonBehaviours.")))))}c.isMDXComponent=!0}}]);