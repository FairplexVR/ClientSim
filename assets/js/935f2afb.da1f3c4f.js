"use strict";(self.webpackChunkclient_sim=self.webpackChunkclient_sim||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"ClientSim","href":"/","docId":"index"},{"type":"category","label":"Guides","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Getting Started","href":"/guides/getting-started","docId":"guides/getting-started"}],"href":"/guides/"},{"type":"category","label":"Systems","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Architecture","href":"/systems/architecture","docId":"systems/architecture"},{"type":"link","label":"Automated Testing","href":"/systems/automated-testing","docId":"systems/automated-testing"},{"type":"category","label":"Editor","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Editor Runtime Linker","href":"/systems/editor/editor-runtime-linker","docId":"systems/editor/editor-runtime-linker"},{"type":"link","label":"Helper Editors","href":"/systems/editor/helper-editors","docId":"systems/editor/helper-editors"},{"type":"link","label":"Settings Window","href":"/systems/editor/settings-window","docId":"systems/editor/settings-window"}],"href":"/systems/editor/"},{"type":"category","label":"Runtime Systems","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Blacklist Manager","href":"/systems/runtime/blacklist-manager","docId":"systems/runtime/blacklist-manager"},{"type":"link","label":"Event Dispatcher and Events","href":"/systems/runtime/event-dispatcher","docId":"systems/runtime/event-dispatcher"},{"type":"link","label":"VRCSDK Helpers","href":"/systems/runtime/helpers","docId":"systems/runtime/helpers"},{"type":"link","label":"HighlightManager","href":"/systems/runtime/highlight-manager","docId":"systems/runtime/highlight-manager"},{"type":"link","label":"Input","href":"/systems/runtime/input","docId":"systems/runtime/input"},{"type":"link","label":"InteractiveLayerProvider","href":"/systems/runtime/interactive-layer-provider","docId":"systems/runtime/interactive-layer-provider"},{"type":"link","label":"Client Sim Main","href":"/systems/runtime/main","docId":"systems/runtime/main"},{"type":"link","label":"Client Sim Menu","href":"/systems/runtime/menu","docId":"systems/runtime/menu"},{"type":"link","label":"Player Manager","href":"/systems/runtime/player-manager","docId":"systems/runtime/player-manager"},{"type":"link","label":"Player Spawner","href":"/systems/runtime/player-spawner","docId":"systems/runtime/player-spawner"},{"type":"link","label":"Player","href":"/systems/runtime/player","docId":"systems/runtime/player"},{"type":"link","label":"RuntimeLoader","href":"/systems/runtime/runtime-loader","docId":"systems/runtime/runtime-loader"},{"type":"link","label":"Scene Manager","href":"/systems/runtime/scene-manager","docId":"systems/runtime/scene-manager"},{"type":"link","label":"Settings","href":"/systems/runtime/settings","docId":"systems/runtime/settings"},{"type":"link","label":"SyncedObjectManager","href":"/systems/runtime/synced-object-manager","docId":"systems/runtime/synced-object-manager"},{"type":"link","label":"TooltipManager","href":"/systems/runtime/tooltip-manager","docId":"systems/runtime/tooltip-manager"},{"type":"link","label":"UdonManager","href":"/systems/runtime/udon-manager","docId":"systems/runtime/udon-manager"},{"type":"link","label":"Unity Event System","href":"/systems/runtime/unity-event-system","docId":"systems/runtime/unity-event-system"}],"href":"/systems/runtime/"},{"type":"link","label":"Script Execution Order","href":"/systems/script-execution-order","docId":"systems/script-execution-order"}],"href":"/systems/"}]},"docs":{"guides/getting-started":{"id":"guides/getting-started","title":"Getting Started","description":"WIP","sidebar":"tutorialSidebar"},"guides/index":{"id":"guides/index","title":"Guides","description":"These guides should help you get started using ClientSim to test your own projects!","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"ClientSim","description":"ClientSim in Unity Editor","sidebar":"tutorialSidebar"},"systems/architecture":{"id":"systems/architecture","title":"Architecture","description":"The architecture of ClientSim has a focus on small components with an event based observer pattern, mixed with manual dependency injection where each class is initialized only with the dependencies it needs. The included player controller is based on generic dependency providers, which allows for the eventual extension to using VR without rewriting the core systems.","sidebar":"tutorialSidebar"},"systems/automated-testing":{"id":"systems/automated-testing","title":"Automated Testing","description":"ClientSim has many different tests to verify the behaviour of the program. The majority of the tests are Integration tests, but support for Unit tests is available. See Unity\u2019s TestRunner to view all tests. When importing ClientSim as a package, tests can be enabled by adding the following line to the project\u2019s package manifest after the \u201cdependencies\u201d","sidebar":"tutorialSidebar"},"systems/editor/editor-runtime-linker":{"id":"systems/editor/editor-runtime-linker","title":"Editor Runtime Linker","description":"This system links and unlinks, on enter and exit playmode, the Editor only hooks in the ClientSim Menu for checking if settings are invalid and a method to open the ClientSim Settings Window.","sidebar":"tutorialSidebar"},"systems/editor/helper-editors":{"id":"systems/editor/helper-editors","title":"Helper Editors","description":"Some of the ClientSim SDK Helper components have specialized editors that offer insight into the VRC component.","sidebar":"tutorialSidebar"},"systems/editor/index":{"id":"systems/editor/index","title":"Editor","description":"These systems help set things up in the Unity Editor.","sidebar":"tutorialSidebar"},"systems/editor/settings-window":{"id":"systems/editor/settings-window","title":"Settings Window","description":"The Settings window displays all the ClientSim Settings that can be edited. Some of these values cannot be changed at runtime. There is also a button to spawn remote players and a text field to give those remote players a custom name.","sidebar":"tutorialSidebar"},"systems/index":{"id":"systems/index","title":"Systems","description":"This documentation includes details on how the systems within ClientSim work if you\'d like to understand them better, troubleshoot them or contribute to this Project! Choose a topic on the left to get started.","sidebar":"tutorialSidebar"},"systems/runtime/blacklist-manager":{"id":"systems/runtime/blacklist-manager","title":"Blacklist Manager","description":"The BlacklistManager is an interface into Udon\u2019s blacklist system. Its only job is to add an object\u2019s hierarchy into the blacklist. This is used when spawning players through the PlayerManager as well as spawning the ClientSim system itself.","sidebar":"tutorialSidebar"},"systems/runtime/event-dispatcher":{"id":"systems/runtime/event-dispatcher","title":"Event Dispatcher and Events","description":"The EventDispatcher is responsible for notifying other systems when specific events happen within ClientSim. A behaviour can subscribe to an event type or send an event of specific type to all of ClientSim without knowing what will handle it. The EventDispatcher is just a collection of event types paired with event handlers. This method decouples the different systems in ClientSim without needing to create a direct dependency. All events sent must extend the IClientSimEvent interface, but can contain any data needed with the event.","sidebar":"tutorialSidebar"},"systems/runtime/helpers":{"id":"systems/runtime/helpers","title":"VRCSDK Helpers","description":"The Helper components are added to an object to help with handling the behavior of VRC SDK components. The role of these components remains the same compared to CyanEmu and Phase 2, although some logic not specific to the function of the object itself has been stripped out. As an example, in CyanEmu the CyanEmuPickupHelper script handled the logic for holding pickups. Now this behavior has been moved outside the pickup helper class, and into the pickup management system. The PickupHelper code now only provides data for how the PlayerHand should handle the pickup.","sidebar":"tutorialSidebar"},"systems/runtime/highlight-manager":{"id":"systems/runtime/highlight-manager","title":"HighlightManager","description":"The HighlightManager will take an object and display an outline highlight effect for that object. This system wraps VRChat\u2019s HighlightFX class. HighlightFX only takes a single renderer, whereas the HighlightManager takes a GameObject. Matching how VRChat handles highlighting objects, all renderers on the object and on its children are used for highlighting. Renderers that are disabled, have a null mesh, or are part of a static batch are ignored. If an object has no valid renderers, then a Highlight Proxy is used based on the first collider on the object. The Highlight Proxy will copy the transform values of the original mesh and also apply the collider size and scale to make it appear that the collider is being highlighted. The HighlightManager is used to visualize the results from the PlayerRaycaster system. There is no set limit to the number of objects that can be highlighted, but only 2 objects are expected to be highlighted at once through ClientSim, one object per player hand. The HighlightManager links to the VRCSDK API for InputManager.EnableObjectHighlight. This hook only takes in renderers though and does not go through the full steps of finding children objects and creating proxies.","sidebar":"tutorialSidebar"},"systems/runtime/index":{"id":"systems/runtime/index","title":"Runtime Systems","description":"These systems help simulate things that happen at Runtime in VRChat worlds.","sidebar":"tutorialSidebar"},"systems/runtime/input":{"id":"systems/runtime/input","title":"Input","description":"In ClientSim, all input calls are in one class to handle input and send events. The ClientSimInputManager uses the new Input System, allowing for event-driven input. It uses the PlayerInput component to gain access to the specific input events based on the Input Bindings displayed below. Since the new Unity Input System package is not included by default, and Unity requires a special setting to enable, all references to the Input System are wrapped in define conditions, which prevents errors when importing into new projects.","sidebar":"tutorialSidebar"},"systems/runtime/interactive-layer-provider":{"id":"systems/runtime/interactive-layer-provider","title":"InteractiveLayerProvider","description":"The InteractiveLayerProvider simply listens to menu open state events and provides a layer mask for which layers are currently interactive. When the menu is open, only the UI and UIMenu layers are interactive. When the menu is closed, all other layers, excluding MirrorReflection, are interactive. InteractiveLayerProvider is used by Raycasters and the ClientSimInputModule.","sidebar":"tutorialSidebar"},"systems/runtime/main":{"id":"systems/runtime/main","title":"Client Sim Main","description":"ClientSimMain is the central point of ClientSim that handles initialization and destruction of ClientSim. It is contained in the ClientSimSystem prefab. On creation, all core systems will be initialized with their dependencies. This system also maintains all the implementations of the VRCSDK hooks to link VRC components to the ClientSim Helpers. ClientSimMain is a singleton to ensure only one instance is running at a time and to help easily pass information from Editor Windows and Tests. None of the runtime systems within ClientSim depend on ClientSimMain being a singleton.","sidebar":"tutorialSidebar"},"systems/runtime/menu":{"id":"systems/runtime/menu","title":"Client Sim Menu","description":"The ClientSimMenu has four pages that can be displayed depending on the situation. The menu is now positioned in world space instead of being an overlay to the camera. It will render on top of everything to ensure players can use the menu.","sidebar":"tutorialSidebar"},"systems/runtime/player":{"id":"systems/runtime/player","title":"Player","description":"The ClientSim representation of a player has been split into many components compared to CyanEmu. Each component handles a different aspect of the player. Below you can see the hierarchy of both the Local and Remote player prefabs.","sidebar":"tutorialSidebar"},"systems/runtime/player-manager":{"id":"systems/runtime/player-manager","title":"Player Manager","description":"The PlayerManager system is responsible for VRCPlayerApi data during ClientSim\u2019s runtime. This system handles creating and destroying players, managing who is the current master, and sending the related Events such as OnPlayerJoin, OnPlayerLeft, and OnNewMaster. The PlayerManager is similar to how it was in CyanEmu, but this time is an instanced class rather than static. Most of the VRCPlayerApi SDK hooks are linked to static functions within this class.","sidebar":"tutorialSidebar"},"systems/runtime/player-spawner":{"id":"systems/runtime/player-spawner","title":"Player Spawner","description":"The PlayerSpawner system is responsible for spawning and initializing local and remote players. Players are spawned from a prefab, set to the location of a spawn point provided by the SceneManager, and then initialized through the PlayerManager.","sidebar":"tutorialSidebar"},"systems/runtime/runtime-loader":{"id":"systems/runtime/runtime-loader","title":"RuntimeLoader","description":"The RuntimeLoader is a static class responsible for starting ClientSim on entering playmode. It uses the InitializeOnLoad Unity hook to check the settings instance to see if ClientSim should start, and creates an instance of ClientSimMain. This class also handles deleting editor-only objects in the scene. In order to allow for testability of ClientSim, a few methods are provided to set test settings and event dispatcher overrides.","sidebar":"tutorialSidebar"},"systems/runtime/scene-manager":{"id":"systems/runtime/scene-manager","title":"Scene Manager","description":"The SceneManager system is mainly a wrapper for the VRC_SceneDescriptor. It provides an interface into VRC scene details such as getting a spawn point and respawn height. This system also handles copying over reference camera settings to the player camera.","sidebar":"tutorialSidebar"},"systems/runtime/settings":{"id":"systems/runtime/settings","title":"Settings","description":"The ClientSim Settings are not a system, but data on how to run ClientSim.","sidebar":"tutorialSidebar"},"systems/runtime/synced-object-manager":{"id":"systems/runtime/synced-object-manager","title":"SyncedObjectManager","description":"The SyncedObjectManager keeps track of all initialized synced objects (IClientSimSyncable) in the scene. These synced objects are put into two lists: one list for all synced objects, and another for all position-synced objects. The SyncedObjectManager currently has only two main functions. The first is to check all position-synced objects to verify they are above the respawn height. If they fall below the respawn height, they are respawned to their start position or destroyed, depending on the settings in the SceneManager. The second function is to ensure objects have the correct owners when a player leaves. The manager listens for the OnPlayerLeft Event, goes through all objects to check if that player was the  owner, and then sets those objects to be owned by the master player instead. This ownership transfer happens before Udon Programs are notified of the player leaving.","sidebar":"tutorialSidebar"},"systems/runtime/tooltip-manager":{"id":"systems/runtime/tooltip-manager","title":"TooltipManager","description":"The TooltipManager will display text in the world above a given interactable object. Tooltips in ClientSim only display text, unlike VRChat which also displays an icon of the respective button needed to use the interact. In SDK3, it appears that the option to set a tooltip location for an interactable is ignored. Tooltips always display at the top center of the first collider on the interactable object. There is no set limit to the number of tooltips that can be displayed, but only 2 tooltips are expected through ClientSim, one per player hand. Displaying tooltips can be disabled in the ClientSimSettings.","sidebar":"tutorialSidebar"},"systems/runtime/udon-manager":{"id":"systems/runtime/udon-manager","title":"UdonManager","description":"The UdonManager keeps track of all initialized UdonBehaviours in the scene. Note that with the VRCSDK, an UdonBehaviour will not initialize if it does not have a program. This means that legacy position-synced UdonBehaviours without programs are not tracked, even with the SyncedObjectManager. The UdonManager has two main roles. The first is to notify all Udon Helpers when ClientSim has finished initializing, which allows UdonBehaviours to start. The second is to listen for certain ClientSim Events to forward to all UdonBehaviours. Currently the UdonManager only forwards the following events:","sidebar":"tutorialSidebar"},"systems/runtime/unity-event-system":{"id":"systems/runtime/unity-event-system","title":"Unity Event System","description":"ClientSim uses two classes to translate actions into Unity\u2019s EventSystem. These classes decouple Unity\u2019s old input system into values based on ClientSim\u2019s current bindings and match VRChat\u2019s interactive UI object filtering.","sidebar":"tutorialSidebar"},"systems/script-execution-order":{"id":"systems/script-execution-order","title":"Script Execution Order","description":"| Execution Order | System Name          | Description                                                                                                                                                    |","sidebar":"tutorialSidebar"}}}')}}]);